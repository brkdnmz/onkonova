/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VideosImport } from './routes/videos'
import { Route as IndexImport } from './routes/index'
import { Route as NewPostIndexImport } from './routes/new-post/index'
import { Route as BlogsIndexImport } from './routes/blogs/index'
import { Route as BlogsBlogLayoutImport } from './routes/blogs/_blog-layout'
import { Route as BlogsBlogLayoutBlogIdIndexImport } from './routes/blogs/_blog-layout/$blogId/index'

// Create Virtual Routes

const BlogsImport = createFileRoute('/blogs')()

// Create/Update Routes

const BlogsRoute = BlogsImport.update({
  id: '/blogs',
  path: '/blogs',
  getParentRoute: () => rootRoute,
} as any)

const VideosRoute = VideosImport.update({
  id: '/videos',
  path: '/videos',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const NewPostIndexRoute = NewPostIndexImport.update({
  id: '/new-post/',
  path: '/new-post/',
  getParentRoute: () => rootRoute,
} as any)

const BlogsIndexRoute = BlogsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BlogsRoute,
} as any)

const BlogsBlogLayoutRoute = BlogsBlogLayoutImport.update({
  id: '/_blog-layout',
  getParentRoute: () => BlogsRoute,
} as any)

const BlogsBlogLayoutBlogIdIndexRoute = BlogsBlogLayoutBlogIdIndexImport.update(
  {
    id: '/$blogId/',
    path: '/$blogId/',
    getParentRoute: () => BlogsBlogLayoutRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/videos': {
      id: '/videos'
      path: '/videos'
      fullPath: '/videos'
      preLoaderRoute: typeof VideosImport
      parentRoute: typeof rootRoute
    }
    '/blogs': {
      id: '/blogs'
      path: '/blogs'
      fullPath: '/blogs'
      preLoaderRoute: typeof BlogsImport
      parentRoute: typeof rootRoute
    }
    '/blogs/_blog-layout': {
      id: '/blogs/_blog-layout'
      path: '/blogs'
      fullPath: '/blogs'
      preLoaderRoute: typeof BlogsBlogLayoutImport
      parentRoute: typeof BlogsRoute
    }
    '/blogs/': {
      id: '/blogs/'
      path: '/'
      fullPath: '/blogs/'
      preLoaderRoute: typeof BlogsIndexImport
      parentRoute: typeof BlogsImport
    }
    '/new-post/': {
      id: '/new-post/'
      path: '/new-post'
      fullPath: '/new-post'
      preLoaderRoute: typeof NewPostIndexImport
      parentRoute: typeof rootRoute
    }
    '/blogs/_blog-layout/$blogId/': {
      id: '/blogs/_blog-layout/$blogId/'
      path: '/$blogId'
      fullPath: '/blogs/$blogId'
      preLoaderRoute: typeof BlogsBlogLayoutBlogIdIndexImport
      parentRoute: typeof BlogsBlogLayoutImport
    }
  }
}

// Create and export the route tree

interface BlogsBlogLayoutRouteChildren {
  BlogsBlogLayoutBlogIdIndexRoute: typeof BlogsBlogLayoutBlogIdIndexRoute
}

const BlogsBlogLayoutRouteChildren: BlogsBlogLayoutRouteChildren = {
  BlogsBlogLayoutBlogIdIndexRoute: BlogsBlogLayoutBlogIdIndexRoute,
}

const BlogsBlogLayoutRouteWithChildren = BlogsBlogLayoutRoute._addFileChildren(
  BlogsBlogLayoutRouteChildren,
)

interface BlogsRouteChildren {
  BlogsBlogLayoutRoute: typeof BlogsBlogLayoutRouteWithChildren
  BlogsIndexRoute: typeof BlogsIndexRoute
}

const BlogsRouteChildren: BlogsRouteChildren = {
  BlogsBlogLayoutRoute: BlogsBlogLayoutRouteWithChildren,
  BlogsIndexRoute: BlogsIndexRoute,
}

const BlogsRouteWithChildren = BlogsRoute._addFileChildren(BlogsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/videos': typeof VideosRoute
  '/blogs': typeof BlogsBlogLayoutRouteWithChildren
  '/blogs/': typeof BlogsIndexRoute
  '/new-post': typeof NewPostIndexRoute
  '/blogs/$blogId': typeof BlogsBlogLayoutBlogIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/videos': typeof VideosRoute
  '/blogs': typeof BlogsIndexRoute
  '/new-post': typeof NewPostIndexRoute
  '/blogs/$blogId': typeof BlogsBlogLayoutBlogIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/videos': typeof VideosRoute
  '/blogs': typeof BlogsRouteWithChildren
  '/blogs/_blog-layout': typeof BlogsBlogLayoutRouteWithChildren
  '/blogs/': typeof BlogsIndexRoute
  '/new-post/': typeof NewPostIndexRoute
  '/blogs/_blog-layout/$blogId/': typeof BlogsBlogLayoutBlogIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/videos'
    | '/blogs'
    | '/blogs/'
    | '/new-post'
    | '/blogs/$blogId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/videos' | '/blogs' | '/new-post' | '/blogs/$blogId'
  id:
    | '__root__'
    | '/'
    | '/videos'
    | '/blogs'
    | '/blogs/_blog-layout'
    | '/blogs/'
    | '/new-post/'
    | '/blogs/_blog-layout/$blogId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  VideosRoute: typeof VideosRoute
  BlogsRoute: typeof BlogsRouteWithChildren
  NewPostIndexRoute: typeof NewPostIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  VideosRoute: VideosRoute,
  BlogsRoute: BlogsRouteWithChildren,
  NewPostIndexRoute: NewPostIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/videos",
        "/blogs",
        "/new-post/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/videos": {
      "filePath": "videos.tsx"
    },
    "/blogs": {
      "filePath": "blogs",
      "children": [
        "/blogs/_blog-layout",
        "/blogs/"
      ]
    },
    "/blogs/_blog-layout": {
      "filePath": "blogs/_blog-layout.tsx",
      "parent": "/blogs",
      "children": [
        "/blogs/_blog-layout/$blogId/"
      ]
    },
    "/blogs/": {
      "filePath": "blogs/index.tsx",
      "parent": "/blogs"
    },
    "/new-post/": {
      "filePath": "new-post/index.tsx"
    },
    "/blogs/_blog-layout/$blogId/": {
      "filePath": "blogs/_blog-layout/$blogId/index.tsx",
      "parent": "/blogs/_blog-layout"
    }
  }
}
ROUTE_MANIFEST_END */
